package uk.ac.warwick.dcs.chess;
import uk.ac.warwick.dcs.chess.piece.*;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Before;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.IOException;

/**
 * Unit test for simple App.
 */
public class AppTest 
{
    private PrintStream mainStdOut;
    private ByteArrayOutputStream bAOSOut;
    
    //This creates a Chess.ChessOut stream - we can use it just like System.out
    //So Chess.ChessOut goes to test.txt
    //This is called before any method is run

    @Before
    public void setupOutput(){
        System.out.println("Setting up ChessOut");
        try{
            Chess.ChessOut = new PrintStream("test.txt");
        }catch(Exception e){
            System.err.println(e);
        }
    }

    /*
     * The following 3 methods are used to redirect System.out
     */
    private void saveOutStream(){
        bAOSOut = new ByteArrayOutputStream();
        mainStdOut = Chess.ChessOut;
        System.setOut(new PrintStream(bAOSOut));
    }

    private void restoreOutStream(){
        System.setOut(mainStdOut);
    }

    private String getOutput(){
        return bAOSOut.toString();
    }


    @Test
    public void drawBoard()
    {
        //This test can't really fail as there isn't an assert!
        //It could only fail if there was an exception generated by one of the below calls

        Board b = new Board();
        b.setupBoard();

        saveOutStream();

        b.drawBoard();
        String boardOutput = getOutput();

        restoreOutStream();

        Chess.ChessOut.println(boardOutput);
    }

    @Test public void boardSetup(){
        Board board = new Board();
        board.setupBoard();
        checkBoard(board);
    }
    
    @Test public void testKingKingCheck() throws IOException{
        //This scenario should never happen in a real game anyway!
        Chess.LoadedBoard lboard = Chess.loadBoard("testfiles/impossibleKings.txt");
        Board board = lboard.board;
        Chess c = new Chess(board,new RandomPlayer(true),new RandomPlayer(false));
        c.setupGame(lboard.blackToStart);
        assertTrue(board.testCheck(true));
        assertTrue(board.testCheck(false));
    }

    @Test public void simpleTestCheckCheck() throws IOException{
        //This scenario should never happen in a real game anyway!
        //This test is basically the same as above, but without initialising an actual Chess game
        Chess.LoadedBoard lboard = Chess.loadBoard("testfiles/impossibleKings.txt");
        Board board = lboard.board;
        assertTrue(board.testCheck(true));
        assertTrue(board.testCheck(false));
    }

    /*
    * This isn't a test, it's a utility method that's called by the other test methods
    * It checks (as in tests, not Chess Check!) whether the board follows the expected initial setup
    */
    public void checkBoard(Board board){
        for(int i = 0; i < 8; i++){
            assertTrue(board.pieceAtLocation(7, i).isWhite());
            assertTrue(board.pieceAtLocation(6, i).isWhite());
            assertTrue(board.pieceAtLocation(6, i) instanceof Pawn);

            assertTrue(!board.pieceAtLocation(0, i).isWhite());
            assertTrue(!board.pieceAtLocation(1, i).isWhite());
            assertTrue(board.pieceAtLocation(1, i) instanceof Pawn);
        }
        assertTrue(board.pieceAtLocation(0, 0) instanceof Rook);
        assertTrue(board.pieceAtLocation(0, 1) instanceof Knight);
        assertTrue(board.pieceAtLocation(0, 2) instanceof Bishop);
        assertTrue(board.pieceAtLocation(0, 3) instanceof Queen);
        assertTrue(board.pieceAtLocation(0, 4) instanceof King);
        assertTrue(board.pieceAtLocation(0, 5) instanceof Bishop);
        assertTrue(board.pieceAtLocation(0, 6) instanceof Knight);
        assertTrue(board.pieceAtLocation(0, 7) instanceof Rook);

        assertTrue(board.pieceAtLocation(7, 0) instanceof Rook);
        assertTrue(board.pieceAtLocation(7, 1) instanceof Knight);
        assertTrue(board.pieceAtLocation(7, 2) instanceof Bishop);
        assertTrue(board.pieceAtLocation(7, 3) instanceof Queen);
        assertTrue(board.pieceAtLocation(7, 4) instanceof King);
        assertTrue(board.pieceAtLocation(7, 5) instanceof Bishop);
        assertTrue(board.pieceAtLocation(7, 6) instanceof Knight);
        assertTrue(board.pieceAtLocation(7, 7) instanceof Rook);

        for(int i = 2; i < 6; i++){
            for(int j = 2; j < 6; j++){
                assertNull(board.pieceAtLocation(j,i));
            }
        }
    }

    @Test
    public void testGameSetup(){
        Chess c = new Chess();
        c.setupGame();
        Board b = Chess.getBoard();
        checkBoard(b);
    }

    @Test public void testCheck(){
        try{
            Chess.LoadedBoard lboard = Chess.loadBoard("testfiles/nocheck.txt");
            Board board = lboard.board;
            Chess c = new Chess(board,new RandomPlayer(true),new RandomPlayer(false));
            c.setupGame(lboard.blackToStart);
            assertTrue(!board.testCheck(true));
    
            //Same as above
            assertTrue(!board.testBlackInCheck());
    
    
            assertTrue(!board.testCheck(false));
            //Same as above
            assertTrue(!board.testWhiteInCheck());
        }catch(IOException e){
            System.err.println("IOException");
        }
//        c.runMoves(1);
    }

    @Test public void testCheckMate(){
        try{
            Chess.LoadedBoard lboard = Chess.loadBoard("testfiles/checkMate.txt");
            Board board = lboard.board;
            Chess c = new Chess(board,new RandomPlayer(true),new RandomPlayer(false));
            c.setupGame(lboard.blackToStart);
            assertTrue(board.testCheck(true));
    
            //Same as above
            assertTrue(board.testBlackInCheck());
    
    
            assertTrue(!board.testCheck(false));
            //Same as above
            assertTrue(!board.testWhiteInCheck());

            assertTrue(board.testCheckMate(true));
        }catch(IOException e){
            System.err.println("IOException");
        }
//        c.runMoves(1);
    }

    @Test public void testCheckNoMate(){
        try{
            Chess.LoadedBoard lboard = Chess.loadBoard("testfiles/checkNoMate.txt");
            Board board = lboard.board;
            Chess c = new Chess(board,new RandomPlayer(true),new RandomPlayer(false));
            c.setupGame(lboard.blackToStart);
            assertTrue(board.testCheck(true));
            //Same as above
            assertTrue(board.testBlackInCheck());
        
            assertTrue(!board.testCheck(false));
            //Same as above
            assertTrue(!board.testWhiteInCheck());

            assertTrue(!board.testCheckMate(true));
        }catch(IOException e){
            System.err.println("IOException");
        }
//        c.runMoves(1);
    }


    @Test public void testInitialPawnMoves(){
        Board board = new Board();
        board.setupBoard();
        int v = 1;
        int dir = 1;
        for(int p = 1; p <= 2; p++){
            for(int h = 0; h < 8; h++){
                try{
                Move[] moves = board.pieceAtLocation(v, h).getAvailableMoves();
                assertTrue(moves.length == 2);
                assertTrue(moves[0].getDestinationVertical() == v + 2 * dir || moves[0].getDestinationVertical() == v + 1 *dir);
                assertTrue(moves[1].getDestinationVertical() == v + 2 * dir || moves[1].getDestinationVertical() == v + 1 * dir);
                assertTrue(moves[0].getDestinationHorizontal() == h);
                assertTrue(moves[1].getDestinationHorizontal() == h);
                }catch(AssertionError e){

                    throw e;
                }
            }
            dir = dir * -1;
            v = 6;
        }

        v = 6;
        for(int h = 0; h < 8; h++){
            Move[] moves = board.pieceAtLocation(v, h).getAvailableMoves();
            assertTrue(moves.length == 2);
            assertTrue(moves[0].getDestinationVertical() == v - 2 || moves[0].getDestinationVertical() == v - 1);
            assertTrue(moves[1].getDestinationVertical() == v - 2 || moves[1].getDestinationVertical() == v - 1);
            assertTrue(moves[0].getDestinationHorizontal() == h);
            assertTrue(moves[1].getDestinationHorizontal() == h);
        }
    }
}
